# This script generates golang structs for Cassandra configurations
import javalang
from pathlib import Path
from typing import List

def parse_file(file: str):
    config_file = Path(file).read_text()
    tree = javalang.parse.parse(config_file)
    for path, node in tree.filter(javalang.tree.ClassDeclaration):
        if node.name == "Config":
            for field in node.fields:
                if 'public' in field.modifiers and not 'static' in field.modifiers:
                    for declarator in field.declarators:
                        print(f'"{declarator.name}": true,')
                # for annotation in field.annotations:
                #     if annotation.name == "Deprecated":
                #         print('Deprecated!')

def generate_configs(versions: List[str]):
    print("""
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code is generated with hack/config. DO NOT EDIT.
package v1beta1

import (
	"strconv"
	"strings"
)

type CassandraConfigValues struct {
	accepted map[string]interface{}
}

func (c *CassandraConfigValues) HasProperty(propertyName string) bool {
	_, found := c.accepted[propertyName]
	return found
}

func GetCassandraConfigValues(serverVersion string) (*CassandraConfigValues, error) {
	versionParts := strings.Split(serverVersion, ".")
	serverMajorVersion, err := strconv.ParseInt(versionParts[0], 10, 8)
	if err != nil {
		return nil, err
	}

	if serverMajorVersion == 3 {
		// Return configuration for 3.11, regardless of the real version (we don't support <3.11)
        return &config311, nil
	}

	if serverMajorVersion == 4 {
		serverMinorVersion, err := strconv.ParseInt(versionParts[1], 10, 8)
		if err != nil {
			return nil, err
		}
		if serverMinorVersion == 0 {
			// Return config40
			return &config40, nil
		}
	}
	// Something brand new..
	return &configtrunk, nil
}

    var(
    """)

    for ver in versions:
        create_config_values(ver)

    print(')')

def create_config_values(version: str):
    print(f"""
        config{version} = CassandraConfigValues{{
		accepted: map[string]interface{{}}{{""")
    parse_file(f'Config-{version}.java')
    print("""
        },
    }
    """)

generate_configs(['311', '40', '400', '406', 'trunk', 'DSE'])
