name: Cass Operator Build & Deploy
on:
  push:
    branches:
      - master
      - 1.10.x
  pull_request:
    branches: [ master ]
jobs:
  testing:
    name: Run unit tests
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    steps:
      - uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/checkout@v2
        if: github.event_name != 'pull_request'
      - name: Set up Go 1.18
        uses: actions/setup-go@v1
        with:
          go-version: 1.18
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          # GHA requires longer timeout
          args: --timeout=10m
          # Optional: show only new issues if it's a pull request. The default value is `false`.
          only-new-issues: ${{ github.event_name == 'pull_request' }}
          skip-pkg-cache: true
          skip-build-cache: true
      - name: Unit Tests
        run: |
          make test
  build_images:
    name: Build Cass Operator Docker Image
    runs-on: ubuntu-latest
    needs: testing
    if: github.ref == 'refs/heads/master'
    # Add "id-token" with the intended permissions.
    permissions:
        contents: 'read'
        id-token: 'write'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
            workload_identity_provider: 'projects/945064329182/locations/global/workloadIdentityPools/github-pool/providers/github'
            service_account: 'gh-actions@k8ssandra.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      # Log in to Google Cloud Artifact Registry
      - name: Login to GCP Artifact Registry
        uses: 'docker/login-action@v1'
        with:
          registry: 'us-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
      - name: Set git parsed values
        id: vars
        run: |
          echo ::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})
          echo ::set-output name=tag_name::${GITHUB_REF#refs/tags/}
          echo ::set-output name=version::$(make version)
      - name: Build and Push - Cass Operator
        id: docker_build_cass_operator
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            k8ssandra/cass-operator:${{ steps.vars.outputs.sha_short }}
            k8ssandra/cass-operator:latest
            k8ssandra/cass-operator:${{ steps.vars.outputs.version }}
            us-docker.pkg.dev/k8ssandra/images/cass-operator:${{ steps.vars.outputs.sha_short }}
            us-docker.pkg.dev/k8ssandra/images/cass-operator:latest
            us-docker.pkg.dev/k8ssandra/images/cass-operator:${{ steps.vars.outputs.version }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Build and push
        id: docker_build_system_logger
        uses: docker/build-push-action@v2
        with:
          file: logger.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            k8ssandra/system-logger:${{ steps.vars.outputs.sha_short }}
            k8ssandra/system-logger:latest
            us-docker.pkg.dev/k8ssandra/images/system-logger:${{ steps.vars.outputs.sha_short }}
            us-docker.pkg.dev/k8ssandra/images/system-logger:latest
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Create bundle
        run: |
          make VERSION=${{ steps.vars.outputs.version }} CHANNEL=dev bundle
      - name: Build and push cass-operator-bundle
        id: docker_build_cass-operator_bundle
        uses: docker/build-push-action@v2
        with:
          file: bundle.Dockerfile
          build-args: |
            VERSION=${{ steps.vars.outputs.version }}
          context: .
          push: ${{ !env.ACT }}
          tags: |
            k8ssandra/cass-operator-bundle:v${{ steps.vars.outputs.version }}
            us-docker.pkg.dev/k8ssandra/images/cass-operator-bundle:v${{ steps.vars.outputs.version }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Build and update cass-operator-catalog
        run: |
          make VERSION=${{ steps.vars.outputs.version }} CHANNEL=dev catalog-build catalog-push
